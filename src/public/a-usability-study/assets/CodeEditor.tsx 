import React, { useState } from 'react';
import { EditorView } from '@codemirror/view';
import { basicSetup } from '@codemirror/basic-setup';
import { javascript } from '@codemirror/lang-javascript';
import { EditorState } from '@codemirror/state';
import CodeMirror from '@uiw/react-codemirror';

interface CodeEditorProps {
  value?: string; 
  onChange?: (value: string) => void; 
  readOnly?: boolean; 
  theme?: 'dark' | 'light'; 
}

function CodeEditor({
  value = '',
  onChange,
  readOnly = false,
  theme = 'light',
} : {
  value: string;
  onChange: any;
  readOnly: boolean;
  theme: string
}) {
  const [code, setCode] = useState<string>(value);

  const handleEditorChange = (value: string) => {
    setCode(value);
    if (onChange) {
      onChange(value);
    }
  };

  return (
    <CodeMirror
      value={code}
      extensions={[
        basicSetup,
        javascript(),
        EditorView.editable.of(!readOnly),
      ]}
      onChange={handleEditorChange}
      theme={theme}
      height="400px"
      style={{ fontSize: '14px', border: '1px solid #ccc', borderRadius: '5px' }}
    />
  );
};

export default CodeEditor;
